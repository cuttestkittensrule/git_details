/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details on writing Custom Plugins, please refer to https://docs.gradle.org/9.1.0/userguide/custom_plugins.html in the Gradle documentation.
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'
    id 'idea'
    id 'fr.stardustenterprises.rust.importer'
    id 'com.gradle.plugin-publish' version '1.1.0'
}

group = "io.github.cuttestkittensrule"
version = "1.0.0"

// Download the source code for dependencies and the javadoc (in IntelliJ IDEA).
// Not required for running the robot, but helps with IntelliJ IDEA development.
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation "fr.stardustenterprises:yanl:0.7.4"
    implementation "fr.stardustenterprises:plat4k:1.6.2"
    rust(project(":native"))
}

rustImport {
    baseDir.set("/META-INF/natives")
    layout.set("hierarchical")
}

pluginBundle {
    vcsUrl = "https://github.com/cuttestkittensrule/git_details"
    tags = ['git', 'vcs']
}

gradlePlugin {
    // Define the plugin
    plugins {
        create("gitDetails") {
            id = 'io.github.cuttestkittensrule.git_details'
            implementationClass = 'io.github.cuttestkittensrule.GitDetailsPlugin'
            displayName = "Git Details"
            description = "A plugin for getting information about git with no prerequisite git installation"
        }
    }
}

publishing {
    repositories {
        mavenLocal()
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)
configurations.functionalTestRuntimeOnly.extendsFrom(configurations.testRuntimeOnly)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets.add(sourceSets.functionalTest)

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

tasks.named('test') {
    // Use JUnit Jupiter for unit tests.
    useJUnitPlatform()
}
