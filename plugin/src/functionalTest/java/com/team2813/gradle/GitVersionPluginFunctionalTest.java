/*
 * This source file was generated by the Gradle 'init' task
 */
package com.team2813.gradle;

import java.io.File;
import java.io.IOException;
import java.io.Writer;
import java.io.FileWriter;
import java.nio.file.Path;

import org.gradle.testkit.runner.GradleRunner;
import org.gradle.testkit.runner.BuildResult;
import org.junit.jupiter.api.Assumptions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;
import static org.junit.jupiter.api.Assertions.*;

/**
 * A simple functional test for the 'com.team2813.git_version.greeting' plugin.
 */
class GitVersionPluginFunctionalTest {
    @TempDir
    File projectDir;

    private File getBuildFile() {
        return new File(projectDir, "build.gradle");
    }

    private File getSettingsFile() {
        return new File(projectDir, "settings.gradle");
    }

    private File getPropertyFile() {
        return new File(projectDir, Path.of("generated", "sources", "git_version", "properties", "git-info.properties").toString());
    }

    @Test
    void canRunTask() throws IOException, InterruptedException {
        writeString(getSettingsFile(), "");
        writeString(getBuildFile(),
                """
                        plugins {
                          id('java')
                          id('com.team2813.gradle.git_version')
                        }
                    """
        );

        try {
            // init git repository in the temporary directory
            new ProcessBuilder()
                    .directory(projectDir)
                    .command("git", "init")
                    .start().waitFor();
            // add the build.gradle and the settings.gradle files
            new ProcessBuilder()
                    .directory(projectDir)
                    .command("git", "add", "-A")
                    .start().waitFor();
            // commit those files (without signatures since we don't need them)
            new ProcessBuilder()
                    .directory(projectDir)
                    .command("git", "commit", "--no-gpg-sign", "-m", "initial commit")
                    .start().waitFor();
        } catch (IOException e) {
            // if we had an IOException, we couldn't find git, or it fails. Either way, abort the test
            Assumptions.abort("Could not execute git commands, so the temporary folder won't be a valid git repository, which would wrongly fail the test!");
        }

        // Run the build
        GradleRunner runner = GradleRunner.create();
        runner.forwardOutput();
        runner.withPluginClasspath();
        runner.withArguments("createGitProperties");
        runner.withProjectDir(projectDir);
        BuildResult result = runner.build();

        // Verify the result
        assertTrue(getPropertyFile().exists());
    }

    private void writeString(File file, String string) throws IOException {
        try (Writer writer = new FileWriter(file)) {
            writer.write(string);
        }
    }
}
